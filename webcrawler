#!/usr/bin/python -u
import sys
import socket
from HTMLParser import HTMLParser
from get import get_login_page, post_login, get_first_page, get_by_url

ADDRESS = "http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/"

LOGIN_PAGE_PATH = "/accounts/login/?next=/fakebook.html"

HOSTNAME = "fring.ccs.neu.edu"
PORT = 80
LOGIN_USERNAME = "id_username"
LOGIN_PASSWORD = "id_password"
MIDDLEWARE_TOKEN = None
USERNAME = "001196344"
PASSWORD = "7L3AD6ZH"
SESSION_ID = None
COOKIE = None
RECV_MESSAGE_SIZE = 1024

SECRET_FLAGS = []

FRONTIER = {}


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

sock.connect((HOSTNAME, PORT))

#sock.settimeout(0.1)






class AnchorHTMLParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.recording = 0
        self.data = []

    def handle_starttag(self, tag, attrs):
        global FRONTIER



        if tag == "a":
            for attr in attrs:
                if attr[0] == "href":
                    if attr[1][0].strip() == "/":
                        if attr[1] not in FRONTIER:
                            FRONTIER[attr[1]] = False

        if tag == "h2":
            for attr in attrs:
                if attr[0] == "class":
                    if attr[1] == "secret_flag":
                        print "FOUND SECRET FLAG"


class LoginHTMLParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.recording = 0
        self.data = []

    def handle_starttag(self, tag, attrs):
        global MIDDLEWARE_TOKEN

        if tag == "input":
            #print tag
            #print attrs
            for attr in attrs:
                if attr[0] == "name":
                    if attr[1] == "csrfmiddlewaretoken":
                        for attr in attrs:
                            if attr[0] == "value":
                                MIDDLEWARE_TOKEN = attr[1]
                                print MIDDLEWARE_TOKEN



def main():
    global FRONTIER
    global COOKIE




    username = sys.argv[1]
    password = sys.argv[2]

    while not SESSION_ID:
        login(username, password)

    anchor_parser = AnchorHTMLParser()

    while len(SECRET_FLAGS) < 5:

        current_frontier = FRONTIER.copy()

        for url in current_frontier:
            if not current_frontier[url]:
                print "Checking: " + str(url)
                response = get_by_url(url, COOKIE)

                code = find_status_code(response)
                code_range = code / 100
                if code_range == 2: # OK
                    anchor_parser.feed(response)
                    find_secret_flag(response)
                    FRONTIER[url] = True

                elif code_range == 3: # REDIRECT
                    new_url = redirect(response)
                    if new_url:
                        if new_url not in FRONTIER:
                            FRONTIER[new_url] = False
                    FRONTIER[url] = True

                elif code_range == 4: # NOT FOUND/ FORBIDDEN - ABANDON
                    FRONTIER[url] = True

                elif code_range == 5: # SERVER ERROR - RETRY
                    FRONTIER[url] = False # technically not necessary


                if len(SECRET_FLAGS) >= 5:
                    break


        print "Checked frontier, looping again"





    anchor_parser.close()
    print str(SECRET_FLAGS)


def redirect(response):
    lines = response.split('\n', 1)
    for line in lines:
        if line[0:10] == "Location: ":
            url = line[10:]
            if url[0] == "/":
                return url
            host_index = url.find(HOSTNAME)
            if -1 < host_index < 10:
                url = url[host_index + len(HOSTNAME):]
            return url
    return False


def is_chunked(response):
    lines = response.split('\n', 1)
    for line in lines:
        if line.find("Transfer-Encoding: chunked"):
            return True
    return False





def find_status_code(response):
    first_line = response.split('\n', 1)[0]
    if len(first_line):
        code = first_line[9:12]
    else:
        code = 500
    return int(code)


def find_secret_flag(html_string):
    global SECRET_FLAGS
    secret_flag = html_string.find("FLAG:")
    if secret_flag > -1:
        secret = html_string[secret_flag + 6: secret_flag + 70]
        SECRET_FLAGS.append(secret)
        print "FOUND SECRET FLAG: " + str(secret)

def login(username, password):
    global ADDRESS
    global MIDDLEWARE_TOKEN
    global SESSION_ID
    global COOKIE

    #login_html = urllib2.urlopen(ADDRESS).read()
    login_html = get_login_page()

    login_parser = LoginHTMLParser()

    # parse login_html for username
    login_parser.feed(login_html)
    login_parser.close()

    print "USER: " + USERNAME
    print "PASSWORD " + PASSWORD
    print "TOKEN " + MIDDLEWARE_TOKEN

    login_return = post_login("/accounts/login/", USERNAME, PASSWORD, MIDDLEWARE_TOKEN)
    print login_return

    session_index = login_return.find("sessionid=")

    SESSION_ID = login_return[session_index + 10: session_index + 42]


    COOKIE = str("csrftoken=" + str(MIDDLEWARE_TOKEN) + "; sessionid=" + str(SESSION_ID))
    print COOKIE
    first_page = get_first_page(COOKIE)
    anchor_parser = AnchorHTMLParser()
    anchor_parser.feed(first_page)
    anchor_parser.close()

    print "FRONTIER = " + str(FRONTIER)

    find_secret_flag(first_page)

    print SECRET_FLAGS


if __name__ == "__main__":
    main()
